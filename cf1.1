#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdbool.h>

#define BOARD_SIZE 7
#define REQ_DISTANCE 3

struct slot ** board;

struct player{
	char name[20];
	int num; 		//declare player struct globally
	int type;											//player type : set to 8 if remove from game OR dead
	int slotType;
	int row;
	int column;
	int life_points;
	int smartness;
	int strength;
	int magicSkill;
	int luck;
	int dexterity;
} player_struct;

struct slot{
	//row number
	int row;
	//column number
	int column;

	int slotType;

	int playerIndexInArray[6];		//holds player's location in player playerIndexInArray     //use calloc to replace [6]

	// adjacent left slot
	struct slot *left;
	// adjacent right slot
	struct slot *right;
	// adjacent up slot
	struct slot *up;
	// adjacent down slot
	struct slot *down;
}slot;

void createBoard(int boardSize, struct slot **upLeft, struct slot **upRight, struct slot **downLeft, struct slot **downRight);

void getPlayer(struct player *playerGet, int playerNum);

void assignStats(struct player *playerStat);

void boardSlots(int numPlayers);

void playerSlots(int numPlayers, struct player playerArray[]);

void setStat(struct player *slotPlayer, int slotType);

void checkIfMove(struct player *currPlayer, bool *up, bool *down, bool *left, bool *right, int numPlayers);

void resetStat(struct player *slotPlayer);

void movePlayer(struct player *player, int moveChoice, int playerNum);

int main(void)
{

	int row, column;

	struct slot* currSlot = NULL;
	struct slot *foundSlots;
	bool explored[BOARD_SIZE][BOARD_SIZE];
	int count = 0;

	//pointer to slot (0,0)
	struct slot *upLeft;

	//pointer to slot (0,boardSize -1)
	struct slot *upRight;

	//pointer to slot (boardSize - 1, 0)
	struct slot *downLeft;

	//pointer to slot (boardSize - 1, boardSize -1)
	struct slot *downRight;


	//Creates the board
	createBoard(BOARD_SIZE, &upLeft, &upRight, &downLeft, &downRight);

	int numPlayers, activePlayers;

	printf("How many players would you like in the game? (max 6): ");		//get num players
	scanf("%d", &numPlayers);

	activePlayers = numPlayers;

	while(numPlayers < 2 || numPlayers > 6)		
	{
		printf("\n\nNumber of players must be at least 2, but at most 6: ");		//type
		scanf("%d", &numPlayers);
	} 

	struct player playerArray[numPlayers];

	for(int i = 0; i < numPlayers; i++)	//making the appropriate number of player structs
	{
		getPlayer(&playerArray[i], i);
	}

	printf("\n\n");
	for(int i = 0; i < numPlayers; i++)
	{
		printf("%d\n %d\n %d\n %d\n %d\n %d\n", playerArray[i].smartness, playerArray[i].strength, playerArray[i].magicSkill, playerArray[i].dexterity, playerArray[i].life_points, playerArray[i].luck);
		printf("\n\n");
	}

	boardSlots(numPlayers);		//allocate board slot type

	playerSlots(numPlayers, playerArray);	//alloctate players to slots randomly

		printf("\n\n");
	for(int i = 0; i < numPlayers; i++)
	{
		printf("%d\n %d\n %d\n %d\n %d\n %d\n", playerArray[i].smartness, playerArray[i].strength, playerArray[i].magicSkill, playerArray[i].dexterity, playerArray[i].life_points, playerArray[i].luck);
		printf("\n\n");
	}

		printf("\n");
	for(int i = 0; i < BOARD_SIZE; i++)
	{
		for(int j = 0; j < BOARD_SIZE; j++)
		{	
			for(int c = 0; c < numPlayers; c++)
			{
				printf("%d ", board[i][j].playerIndexInArray[c]);			//tesing
			}
			printf("  ");
		}
		printf("\n");
	}

		printf("\n\n");
	for(int i = 0; i < BOARD_SIZE; i++)
	{
		for(int j = 0; j < BOARD_SIZE; j++)
		{
			printf("%d ", board[i][j].slotType);							//testing
		}

		printf("\n");
	}

		printf("\n\n");
	for(int i = 0; i < numPlayers; i++)
	{
		printf("%d %d (%d,%d)", i, playerArray[i].slotType, playerArray[i].row, playerArray[i].column);			//testing

		printf("\n");
	}

	bool live = true;
	int round = 0;

	while(live)
	{
		for(int loop = 0; loop < numPlayers; loop++)
		{
			if(playerArray[loop].type != 8)
			{
				int menuChoice, moveChoice, attackChoice;
				bool up = false, down = false, left = false, right = false;

				checkIfMove(&playerArray[loop], &up, &down, &left, &right, numPlayers);

				printf("\n\nWould you like to :");
				printf("\n1) Move");
				scanf("%d", &menuChoice);

				if(menuChoice == 1)
				{
					printf("\n\n");
					if(up)
					{
						printf("\n1) Move up");		
					}

					if(down)
					{
						printf("\n2) Move down");
					}

					if(left)
					{
						printf("\n3) Move left");
					}

					if(right)
					{
						printf("\n4) Move right");
					}
					
					scanf("%d", &moveChoice);

					movePlayer(&playerArray[loop], moveChoice, loop);



		printf("\n\n");
	for(int i = 0; i < BOARD_SIZE; i++)
	{
		for(int j = 0; j < BOARD_SIZE; j++)
		{	
			for(int c = 0; c < numPlayers; c++)
			{
				printf("%d ", board[i][j].playerIndexInArray[c]);			//tesing
			}
			printf("  ");
		}
		printf("\n");
	}

		printf("\n\n");
	for(int i = 0; i < BOARD_SIZE; i++)
	{
		for(int j = 0; j < BOARD_SIZE; j++)
		{
			printf("%d ", board[i][j].slotType);							//testing
		}

		printf("\n");
	}

		printf("\n\n");
	for(int i = 0; i < numPlayers; i++)
	{
		printf("%d %d (%d,%d)", i, playerArray[i].slotType, playerArray[i].row, playerArray[i].column);			//testing

		printf("\n");
	}
				}
			}
		}
	}
}

void createBoard(int boardSize, struct slot **upLeft, struct slot **upRight, struct slot **downLeft, struct slot **downRight){

	//The board is represented as a pointer of pointer to slots
	//This allocates in memory the space for the pointers to each row of the board
	board = malloc(boardSize * sizeof(struct slot *));


	for(int i =0; i< boardSize; i++){
		//This allocates in memory the space for the slots in each row of the board
		board[i] = malloc(boardSize * sizeof(struct slot));

		//For each slot it sets up the row and column number
		for(int j=0;j < boardSize; j++){
			board[i][j].row = i;
			board[i][j].column = j;
		}
	}

	//It sets up the adjacent slots for the slots that are
	//not at the borders. These slots have 4 adjacent elements
	for(int i =1; i< boardSize-1; i++){
		for(int j=1;j < boardSize-1; j++){
			board[i][j].up = &board[i-1][j];
			board[i][j].right = &board[i][j+1];
			board[i][j].down = &board[i+1][j];
			board[i][j].left = &board[i][j-1];
		}
	}

	//It sets up the adjacent slots for the slots that are
	//in the first and the last row, except the slots at the edges.
	//
	for(int j = 1; j < boardSize -1; j++){
		//It sets up the adjacent slots for the slots that are in the first row.
		//These slots don't have an adjacent element on top of them
		// because they are on the first row of the board
		board[0][j].right = &board[0][j+1];
		board[0][j].left = &board[0][j-1];
		board[0][j].down = &board[1][j];
		board[0][j].up = NULL;

		//It sets up the adjacent slots for the slots that are in the last row.
		//These slots don't have an adjacent element on down them
		// because they are on the last row of the board
		board[boardSize - 1][j].right = &board[boardSize - 1][j+1];
		board[boardSize -1][j].left = &board[boardSize - 1][j-1];
		board[boardSize - 1][j].up = &board[boardSize - 2][j];
		board[boardSize - 1][j].down = NULL;
	}

	//It sets up the adjacent slots for the slots that are
	//in the first and the last column, except the slots at the edges.
	//
	for(int i = 1; i < boardSize -1; i++){
		//It sets up the adjacent slots for the slots that are in the first column.
		//These slots don't have an adjacent element on the left
		// because they are on the first column of the board
		board[i][0].right = &board[i][1];
		board[i][0].up = &board[i-1][0];
		board[i][0].down = &board[i+1][0];
		board[i][0].left = NULL;

		//It sets up the adjacent slots for the slots that are in the last column.
		//These slots don't have an adjacent element on the right
		// because they are on the last column of the board
		board[i][boardSize-1].left = &board[i][boardSize-2];
		board[i][boardSize -1].up = &board[i -1][boardSize-1];
		board[i][boardSize -1].down = &board[i+1][boardSize -1];
		board[i][boardSize -1].right = NULL;
	}


		//It sets up the adjacent slots for the slot at position (0,0).
		//This only has only 2 adjacent slots: right and down
		board[0][0].right = &board[0][1];
		board[0][0].down = &board[1][0];

		//It sets up the adjacent slots for the slot at position (0,boardSize -1).
		//This only has only 2 adjacent slots: left and down
		board[0][boardSize-1].left = &board[0][boardSize-2];
		board[0][boardSize -1].down = &board[1][boardSize -1];

		//It sets up the adjacent slots for the slot at position (boarSize -1 ,0).
		//This only has only 2 adjacent slots: up and right
		board[boardSize -1][0].right = &board[boardSize -1][1];
		board[boardSize -1][0].up = &board[boardSize -2][0];

		//It sets up the adjacent slots for the slot at position (boarSize -1 ,boardSize-1).
		//This only has only 2 adjacent slots: up and left
		board[boardSize - 1][boardSize-1].up = &board[boardSize-2][boardSize-1];
		board[boardSize - 1][boardSize -1].left = &board[boardSize -1][boardSize -2];







	//assigns a pointer to slot at position (0, 0)
	*upLeft = &board[0][0];
	//assigns pointer of pointer to slot at position (0, boardSize -1)
	*upRight = &board[0][boardSize -1];
	//assigns pointer of pointer to slot at position ( boardSize -1,)
	*downLeft = &board[boardSize -1][0];
	//assigns pointer of pointer to slot at position (boardSize -1, boardSize -1)
	*downRight = &board[boardSize -1][boardSize -1];
}

void getPlayer(struct player *playerGet, int playerNum)
{
	char text[20];

	printf("\n\nPlease select a type for player %d by entering a number:\n", playerNum + 1);		//get player type
	printf("(1) Elf\n(2) Human\n(3) Ogre\n(4) Wizard\nEnter the choice: ");
	scanf("%d", &playerGet->type);


	while(playerGet->type < 1 || playerGet->type > 4)
	{
		printf("\n\nYou must enter a valid choice(1-4): ");
		scanf("%d", &playerGet->type);
	}

	
	playerGet->life_points = 100;
	playerGet->num = playerNum;		//see struct for info

	printf("\n\nPlease enter a name for the player: ");			//mget name of player
	scanf("%s", &text);

	strcpy(playerGet->name, text);

	assignStats(playerGet);
}

void assignStats(struct player *playerStat)
{
	time_t t;
	srand((unsigned) time(&t));	

	if(playerStat->type == 1) // if type is elf
	{
		playerStat->luck = rand() % 42 + 59;	//[100,60]
		playerStat->smartness = rand() % 32 + 69;	//[100,70]
		playerStat->strength = rand() % 50 + 1;	//[50,1]
		playerStat->magicSkill = rand() % 20 + 50;	//(50,80)
	    playerStat->dexterity = rand() % 100 + 1;	//[100,1] rand() % (max - min + 1) + min
		playerStat->life_points = 100;
	}
	else if(playerStat->type == 2)
	{
		time_t t;						//call stat change for tile detection thinger CODE
		srand((unsigned) time(&t));
		
		int sum = 300;
		
		playerStat->life_points = 100;

		while(sum >= 300) // for human
		{
			playerStat->smartness = rand() % 100 + 1;
			playerStat->luck = rand() % 100 + 1;
			playerStat->strength = rand() % 100 + 1;	// stat for human
			playerStat->magicSkill = rand() % 100 + 1;
	   		playerStat->dexterity = rand() % 100 + 1;
	   		
	   		sum = (playerStat->smartness) + (playerStat->strength) + (playerStat->magicSkill) + (playerStat->luck) + (playerStat->dexterity);
		}

	}
	else if(playerStat->type == 3) // ogre
	{
		int sum = 51;
		
		playerStat->life_points = 100;
		playerStat->magicSkill = 0;
		playerStat->strength = rand() % 22 + 79;
		playerStat->dexterity = rand() % 22 + 79;
		   
		while(sum >= 50)
		{
			playerStat->smartness = rand() % 21;
			playerStat->luck = rand() % 50;	//stats for ogre
						
			sum = (playerStat->luck) + (playerStat->smartness);
		}
	}
	else if(playerStat->type == 4) // wizard
	{
		playerStat->life_points = 100;
		playerStat->luck = rand() % 52 + 49;		//stats for wizard
		playerStat->smartness = rand() % 12 + 89;
		playerStat->strength = rand() % 21 + 1;
		playerStat->magicSkill = rand() % 22 + 79;
	    playerStat->dexterity = rand() % 100 + 1;
	}
}

void boardSlots(int numPlayers)
{
	time_t t;
	srand((unsigned) time(&t));	//fill slot type into slot board randomly (1 - 3); 1 level ground, 2 hill, 3 city

	for(int i = 0; i < BOARD_SIZE; i++)
	{
		for(int j = 0; j < BOARD_SIZE; j++)
		{
			board[i][j].slotType = rand() % 3 + 1;
			
			for(int c = 0; c < numPlayers; c++)
			{
				board[i][j].playerIndexInArray[c] = 8;
			}
		}
	}
}

void playerSlots(int numPlayers, struct player playerArray[])
{ 
	time_t t;						
	srand((unsigned) time(&t));

	int playerIndex[numPlayers], i, j, tmp;

	for(i = 0; i < numPlayers; i++)
	{
		playerIndex[i] = i;			//create list of player array index that are in play
	}

	for(int c = 0; c < numPlayers; c++)
	{
		int x = 0;

		i = rand() % BOARD_SIZE;
		j = rand() % BOARD_SIZE;
		while(board[i][j].playerIndexInArray[x] != 8)
		{
			++x;
		}

		board[i][j].playerIndexInArray[x] = c;

		playerArray[c].row = i;
		playerArray[c].column = j;
		playerArray[c].slotType = board[i][j].slotType;

		setStat(&playerArray[c], playerArray[c].slotType);
	}
}

void setStat(struct player *slotPlayer, int slotType)	//cant't go below 0 (ie  not negative)
{
	if(slotType == 2)
	{
		if(slotPlayer->dexterity < 50 )
		{
			slotPlayer->strength -= 10;
		}
		else if(slotPlayer->dexterity >= 60)
		{
			slotPlayer->strength += 10;
		}
	}
	else if(slotType == 3)
	{
		if(slotPlayer->smartness > 60)
		{
			slotPlayer->magicSkill += 10;
		}
		else if(slotPlayer->smartness <= 50)
		{
			slotPlayer->dexterity -= 10;
		}
	}

	if(slotPlayer->strength < 0)
	{
		slotPlayer->strength = 0;
	}

	if(slotPlayer->dexterity < 0)
	{
		slotPlayer->dexterity = 0;
	}
	
	if(slotPlayer->magicSkill < 0)
	{
		slotPlayer->magicSkill = 0;
	}

}

void checkIfMove(struct player *currPlayer, bool *up, bool *down, bool *left, bool *right, int numPlayers)
{
	if(!(currPlayer->row + 1 >= numPlayers))
	{
		*down = true;
	}

	if(!(currPlayer->row - 1 <= -1))
	{
		*up = true;
	}

	if(!(currPlayer->column + 1 >= numPlayers))
	{
		*right = true;
	}

	if(!(currPlayer->column - 1 <= -1))
	{
		*left = true;
	}
}

void movePlayer(struct player *player, int moveChoice, int playerNum)
{
	resetStat(player);

	int x, i = player->row, j = player->column;

	while(board[i][j].playerIndexInArray[x] != playerNum)
	{
		x++;
	}

	board[i][j].playerIndexInArray[x];

	int r = 0;														//1 up 2 down 3 left 4 right

	if(moveChoice == 1)
	{
		player->row -= 1;

		while(board[i - 1][j].playerIndexInArray[r] != 8)
		{
			++r;
		}

		board[i - 1][j].playerIndexInArray[r] = playerNum;
	}

	if(moveChoice == 2)
	{
		player->row += 1;

		while(board[i + 1][j].playerIndexInArray[r] != 8)
		{
			++r;
		}

		board[i + 1][j].playerIndexInArray[r] = playerNum;
	}

	if(moveChoice == 3)
	{
		player->column -= 1;

		while(board[i][j - 1].playerIndexInArray[r] != 8)
		{
			++r;
		}

		board[i][j - 1].playerIndexInArray[r] = playerNum;
	}

	if(moveChoice == 4)
	{
		player->column += 1;

		while(board[i][j + 1].playerIndexInArray[r] != 8)
		{
			++r;
		}

		board[i][j - 1].playerIndexInArray[r] = playerNum;
	}

	//get new type
	//change stat
}

void resetStat(struct player *slotPlayer)
{
	int slotType = slotPlayer->slotType;

	if(slotType == 2)
	{
		if(slotPlayer->dexterity < 50 )
		{
			slotPlayer->strength -= 10;
		}
		else if(slotPlayer->dexterity >= 60)
		{
			slotPlayer->strength += 10;
		}
	}
	else if(slotType == 3)
	{
		if(slotPlayer->smartness > 60)
		{
			slotPlayer->magicSkill += 10;
		}
		else if(slotPlayer->smartness <= 50)
		{
			slotPlayer->dexterity -= 10;
		}
	}
}

/*	print playerIndexInArray for each slot
	printf("\n");
	for(int i = 0; i < BOARD_SIZE; i++)
	{
		for(int j = 0; j < BOARD_SIZE; j++)
		{	
			for(int c = 0; c < numPlayers; c++)
			{
				printf("%d ", board[i][j].playerIndexInArray[c]);
			}
			printf("  ");
		}
		printf("\n");
	}
*/ 

/* print slot type
	printf("\n\n");
	for(int i = 0; i < BOARD_SIZE; i++)
	{
		for(int j = 0; j < BOARD_SIZE; j++)
		{
			printf("%d ", board[i][j].slotType);
		}

		printf("\n");
	}
*/

/*print player location info
		printf("\n\n");
	for(int i = 0; i < numPlayers; i++)
	{
		printf("%d %d (%d,%d)", i, playerArray[i].slotType, playerArray[i].row, playerArray[i].column);

		printf("\n");
	}
*/

/*
	printf("\n\n");
	for(int i = 0; i < numPlayers; i++)
	{
		printf("%d\n %d\n %d\n %d\n %d\n %d\n", playerArray[i].smartness, playerArray[i].strength, playerArray[i].magicSkill, playerArray[i].dexterity, playerArray[i].life_points, playerArray[i].luck);
		printf("\n\n");
	}

*/


//instead of storing player data in board, just store slot type and coordinates in player slot; then find if player(s) correspond to slots being searched for attacking etc.?
